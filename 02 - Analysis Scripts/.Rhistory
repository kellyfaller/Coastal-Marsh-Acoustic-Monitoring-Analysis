geom_boxplot()+
theme_bw(base_size=15)+
labs(x= " ", y= "BI - Bioacoustics")+
guides(fill=FALSE)+
stat_compare_means(method="t.test",comparisons = my_comparisons1)+
scale_fill_manual(values=c("lightsteelblue","skyblue3","dodgerblue4","navyblue"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
box_avg_ndsi_tod<- ggplot(index_timeofday, aes(x=Twilight,y= avg_NDSI, fill=Twilight))+
geom_boxplot()+
theme_bw(base_size=15)+
labs(x= " ", y= "NDSI - Anthropogenic Disturbance")+
guides(fill=FALSE)+
stat_compare_means(method="t.test",comparisons = my_comparisons1)+
scale_fill_manual(values=c("lightsteelblue","skyblue3","dodgerblue4","navyblue"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
plot_grid(box_avg_aci_tod,
box_avg_bi_tod,
box_avg_ndsi_tod,
nrow= 1, align = "v", axis="l",
labels="AUTO")
ggplot(filter(index_timeofday, Twilight!="night"&STATION%in%c("GAR_01","GAR_02","GAR_04")), aes(x=DATE, y=avg_ACI, fill=Twilight))+
geom_bar(stat="identity")+
coord_polar()+
theme_bw()+
scale_x_date(labels=date_format("%b-%d"),date_breaks =  "1 day")+
scale_fill_manual(values=c("lightsteelblue","skyblue3","dodgerblue4","navyblue"))+
labs(title="Restoration sites")
ggplot(filter(index_timeofday, Twilight!="night"&STATION%in%c("RF_01","RF_02")), aes(x=DATE, y=avg_ACI, fill=Twilight))+
geom_bar(stat="identity")+
coord_polar()+
theme_bw()+
scale_x_date(labels=date_format("%b-%d"),date_breaks =  "1 day")+
scale_fill_manual(values=c("lightsteelblue","skyblue3","dodgerblue4","navyblue"))+
labs(title="Reference sites")
ggplot(index_timeofday, aes(x=DATE, y=avg_ACI, color=STATION))+
facet_grid(STATION~Twilight)+
geom_point(aes(size=avg_ACI))+
theme_bw()+
theme(legend.position="bottom")+
labs(y="Mean ACI - complexity", x="Julian day", color="")+
scale_x_date(date_labels = "%j")+
scale_size_continuous(range = c(1, 3.5))+
guides(size=FALSE, color=FALSE)
a<-ggplot(index_data,aes(x=DATE,y=hour(TIME),fill=ACI))+
facet_wrap(~STATION, ncol=1)+
geom_raster()+
theme_classic()+
theme(legend.position="bottom")+
scale_fill_viridis(option ="turbo",limits = c(92, 1565))+
scale_x_date(date_labels = "%j")+
labs(x="Julian day", y="Hour of the day", fill="ACI", title="Complexity")
b<-ggplot(index_data,aes(x=DATE,y=hour(TIME),fill=BI))+
facet_wrap(~STATION, ncol=1)+
geom_raster()+
theme_classic()+
theme(legend.position="bottom")+
scale_fill_viridis(option ="rocket",limits = c(14,251))+
scale_x_date(date_labels = "%j")+
labs(x="Julian day", y="Hour of the day", fill="BI", title="Bioacoustics")
c<-ggplot(index_data,aes(x=DATE,y=hour(TIME),fill=NDSI))+
facet_wrap(~STATION, ncol=1)+
geom_raster()+
theme_classic()+
theme(legend.position="bottom")+
scale_fill_viridis(option ="mako",limits = c(-1,1))+
scale_x_date(date_labels = "%j")+
labs(x="Julian day", y="Hour of the day", fill="NDSI", title="Anthropogenic Disturbance")
plot_grid(a,
b,
c,
ncol= 3,
labels="AUTO")
n_distinct(species_data_birdnet$Scientific_Name)
setDT(species_data_birdnet)[, .(count = uniqueN(Scientific_Name)), by = Station]
setDT(species_data_birdnet)[, .(count = uniqueN(Scientific_Name)), by = Site]
guild_count<- setDT(species_data_birdnet)[, .(count = uniqueN(Scientific_Name)), by = Guild]
species_breakdown <- species_data_birdnet %>%
group_by(Station, Scientific_Name) %>%
summarize(Count = n()) %>%
mutate(Percent = round(Count / sum(Count) * 100, 2))
species_over_1p<- species_breakdown %>%
mutate(Percent_1p = case_when(
Percent > 0.01~ "Above",
Percent  < 0.01 ~ "Below",
Percent == 0.01 ~ "At")
%>% as.factor())
species_data_birdnet2 <- species_data_birdnet %>%
mutate(Site_Type = case_when(
Station == "RF_01" ~ "Reference",
Station == "RF_02" ~ "Reference",
Station == "GAR_01" ~ "Wild Card",
Station == "GAR_02" ~ "Restoration",
Station == "GAR_03" ~ "Wild Card",
Station == "GAR_04" ~ "Restoration")
%>% as.factor())
RF_01_spps_breakdown <- species_data_birdnet %>%
filter(Station == "RF_01") %>%
group_by(Scientific_Name) %>%
summarize(Count = n()) %>%
mutate(Percent = round(Count / sum(Count) * 100, 2))
RF_02_spps_breakdown <- species_data_birdnet %>%
filter(Station == "RF_02") %>%
group_by(Scientific_Name) %>%
summarize(Count = n()) %>%
mutate(Percent = round(Count / sum(Count) * 100, 2))
GAR_01_spps_breakdown <- species_data_birdnet %>%
filter(Station == "GAR_01") %>%
group_by(Scientific_Name) %>%
summarize(Count = n()) %>%
mutate(Percent = round(Count / sum(Count) * 100, 2))
GAR_02_spps_breakdown <- species_data_birdnet %>%
filter(Station == "GAR_02") %>%
group_by(Scientific_Name) %>%
summarize(Count = n()) %>%
mutate(Percent = round(Count / sum(Count) * 100, 2))
ggplot(data= species_data_birdnet, aes(x= DateTime, fill= Lower_Guild), na.rm=T)+
geom_histogram()+ coord_polar()+
theme_bw(base_size=15)+
ggtitle("All Station Guild Breakdown")+
labs(x= "DateTime", y= "Guild")
ggplot(species_data_birdnet, aes(x= Common_Birds,  group= Station)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..,accuracy=0.01),
y= ..prop.. ), stat= "count", vjust =- 1.5, size= 3) +
labs(y = "Percent", fill="Common_Birds") +
guides(fill= FALSE)+
theme_bw(base_size=15)+
facet_grid(~Station) +
scale_y_continuous(labels = scales::percent)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(species_data_birdnet, aes(x= Lower_Guild,  group= Station)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..,accuracy=0.1),
y= ..prop.. ), stat= "count", vjust =- 1.5, size= 2.5) +
labs(y = "Percent", fill="Lower_Guild") +
guides(fill= FALSE)+
theme_bw(base_size=18)+
facet_grid(~Station) +
scale_y_continuous(labels = scales::percent)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(species_data_birdnet, aes(x= Lower_Guild,  group= Station)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..,accuracy=0.1),
y= ..prop.. ), stat= "count", vjust =- 1.5, size= 2.5) +
labs(x= "Guild", y = "Percent", fill="Lower_Guild") +
guides(fill= FALSE)+
theme_bw(base_size=18)+
facet_grid(~Station) +
scale_y_continuous(labels = scales::percent)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Common Birds
Restore_common <- ggplot(species_data_birdnet2 %>% filter(Site_Type == "Restoration"), aes(x= Common_Birds,  group= Station)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..,accuracy=0.01),
y= ..prop.. ), stat= "count", vjust =- 1.5, size= 3) +
labs(x= " ", y = "Percent", fill="Common_Birds") +
guides(fill= FALSE)+
theme_bw(base_size=15)+
facet_grid(~Station) +
labs(subtitle = "Restoration Sites") +
scale_y_continuous(labels = scales::percent)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
Refer_common <- ggplot(species_data_birdnet2 %>% filter(Site_Type == "Reference"), aes(x= Common_Birds,  group= Station)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..,accuracy=0.1),
y= ..prop.. ), stat= "count", vjust =- 1.5, size= 2.5) +
labs(x= " ", y = "Percent", fill="Lower_Guild") +
guides(fill= FALSE)+
theme_bw(base_size=18)+
facet_grid(~Station) +
labs(subtitle = "Reference Sites") +
scale_y_continuous(labels = scales::percent)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
Wild_common <- ggplot(species_data_birdnet2 %>% filter(Site_Type == "Wild Card"), aes(x= Common_Birds,  group= Station)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..,accuracy=0.1),
y= ..prop.. ), stat= "count", vjust =- 1.5, size= 2.5) +
labs(x= "Common Bird Species Alpha Code", y = "Percent", fill="Lower_Guild") +
guides(fill= FALSE)+
theme_bw(base_size=18)+
facet_grid(~Station) +
labs(subtitle = "Wild Card Sites") +
scale_y_continuous(labels = scales::percent)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# By Guild
Restore_guild <- ggplot(species_data_birdnet2 %>% filter(Site_Type == "Restoration"), aes(x= Lower_Guild,  group= Station)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..,accuracy=0.01),
y= ..prop.. ), stat= "count", vjust =- 1.5, size= 3) +
labs(x= " ", y = "Percent", fill="Common_Birds") +
guides(fill= FALSE)+
theme_bw(base_size=15)+
facet_grid(~Station) +
labs(subtitle = "Restoration Sites") +
scale_y_continuous(labels = scales::percent)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
Refer_guild <- ggplot(species_data_birdnet2 %>% filter(Site_Type == "Reference"), aes(x= Lower_Guild,  group= Station)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..,accuracy=0.1),
y= ..prop.. ), stat= "count", vjust =- 1.5, size= 2.5) +
labs(x= " ", y = "Percent", fill="Lower_Guild") +
guides(fill= FALSE)+
theme_bw(base_size=18)+
facet_grid(~Station) +
labs(subtitle = "Reference Sites") +
scale_y_continuous(labels = scales::percent)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
Wild_guild <- ggplot(species_data_birdnet2 %>% filter(Site_Type == "Wild Card"), aes(x= Lower_Guild,  group= Station)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes( label = scales::percent(..prop..,accuracy=0.1),
y= ..prop.. ), stat= "count", vjust =- 1.5, size= 2.5) +
labs(x= "Guild", y = "Percent", fill="Lower_Guild") +
guides(fill= FALSE)+
theme_bw(base_size=18)+
facet_grid(~Station) +
labs(subtitle = "Wild Card Sites") +
scale_y_continuous(labels = scales::percent)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
title1  = "Common Bird Species By Site Type"
title2  = "Bird Guild By Site Type"
plot_grid(Restore_common,
Refer_common,
Wild_common,
labels = title1, label_size = 14, hjust = -2,
nrow= 3, align = "v", axis="l")
plot_grid(Restore_guild,
Refer_guild,
Wild_guild,
labels = title2, label_size = 14, hjust = -3,
nrow= 3, align = "v", axis="l")
st(index_data %>% dplyr::select(c("SITE", "STATION", "NDSI", "ACI", "ADI" , "AEI", "BI")))
st(index_aru2 %>% dplyr::select(c("SITE", "STATION", "Site_Type", "avg_NDSI", "avg_ACI", "avg_ADI" , "avg_AEI", "avg_BI")))#,
st(index_data %>% dplyr::select(c("SITE", "STATION", "NDSI", "ACI", "ADI" , "AEI", "BI")))
st(avg_index2 %>% dplyr::select(c("SITE", "STATION", "Site_Type", "avg_NDSI", "avg_ACI", "avg_ADI" , "avg_AEI", "avg_BI")))#,
#"sd_NDSI","sd_ACI", "sd_ADI" , "sd_AEI", "sd_BI")))
st(species_data_birdnet2 %>% dplyr::select(c("Site", "Station", "Confidence", "Site_Type")))
st(species_data_birdnet %>% dplyr::select(c("Site", "Station", "Confidence", "Common_Birds")), group= 'Common_Birds', group.long = TRUE)
st(species_breakdown_birdnet)
ggplot(data= day_avg_index, aes(x= DAY, y= avg_ACI, color= STATION))+
geom_line(size=1.5)+
geom_point(size= 4)+
theme_bw(base_size=15)+
ggtitle("Daily Average Acoustic Complexity")+
labs(x= "Date", y= "ACI")+
scale_x_datetime(date_breaks =  "1 day")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# 2023 Recording Schedule
ggplot(recording_metadata %>% filter (Year == "2023", name != "TEST Bait Site (Throwaway)"), aes(x = Julian_Day, y = name)) +
geom_segment(aes(xend = Julian_Day, yend = name), color = "gray") +  # Stems
geom_point(aes(color = as.factor(name)), size = 4) +  # Lollipop heads (line) - can adjust to be points
scale_color_viridis_d() +
scale_x_continuous(breaks = seq(0, 365, by = 5)) +
labs(x = "Julian Day", y = "Recorder (Site ID)",
title = "Julian Days Each Recorder Was Active in 2023") +
theme_minimal(base_size = 15) +
theme(panel.grid.major.y = element_blank())+
theme(legend.position = "none")
# 2024 Recording Schedule
ggplot(recording_metadata %>% filter (Year == "2024"), aes(x = Julian_Day, y = name)) +
geom_segment(aes(xend = Julian_Day, yend = name), color = "gray") +  # Stems
geom_point(aes(color = as.factor(name)), size = 4) +  # Lollipop heads (line) - can adjust to be points
scale_color_viridis_d() +
scale_x_continuous(breaks = seq(0, 365, by = 5)) +
labs(x = "Julian Day", y = "Recorder (Site ID)",
title = "Julian Days Each Recorder Was Active in 2024") +
ylim(115, inf)+
theme_minimal(base_size = 15) +
theme(panel.grid.major.y = element_blank())+  # Optionally remove horizontal grid lines
theme(legend.position = "none")
# 2023 Recording Schedule
ggplot(recording_metadata %>% filter (Year == "2023", name != "TEST Bait Site (Throwaway)"), aes(x = Julian_Day, y = name)) +
geom_segment(aes(xend = Julian_Day, yend = name), color = "gray") +  # Stems
geom_point(aes(color = as.factor(name)), size = 4) +  # Lollipop heads (line) - can adjust to be points
scale_color_viridis_d() +
scale_x_continuous(breaks = seq(0, 365, by = 5)) +
labs(x = "Julian Day", y = "Recorder (Site ID)",
title = "Julian Days Each Recorder Was Active in 2023") +
theme_minimal(base_size = 15) +
theme(panel.grid.major.y = element_blank())+
theme(legend.position = "none")
# 2024 Recording Schedule
ggplot(recording_metadata %>% filter (Year == "2024"), aes(x = Julian_Day, y = name)) +
geom_segment(aes(xend = Julian_Day, yend = name), color = "gray") +  # Stems
geom_point(aes(color = as.factor(name)), size = 4) +  # Lollipop heads (line) - can adjust to be points
scale_color_viridis_d() +
scale_x_continuous(breaks = seq(0, 365, by = 5)) +
labs(x = "Julian Day", y = "Recorder (Site ID)",
title = "Julian Days Each Recorder Was Active in 2024") +
ylim(115, "inf")+
theme_minimal(base_size = 15) +
theme(panel.grid.major.y = element_blank())+  # Optionally remove horizontal grid lines
theme(legend.position = "none")
# 2023 Recording Schedule
ggplot(recording_metadata %>% filter (Year == "2023", name != "TEST Bait Site (Throwaway)"), aes(x = Julian_Day, y = name)) +
geom_segment(aes(xend = Julian_Day, yend = name), color = "gray") +  # Stems
geom_point(aes(color = as.factor(name)), size = 4) +  # Lollipop heads (line) - can adjust to be points
scale_color_viridis_d() +
scale_x_continuous(breaks = seq(0, 365, by = 5)) +
labs(x = "Julian Day", y = "Recorder (Site ID)",
title = "Julian Days Each Recorder Was Active in 2023") +
theme_minimal(base_size = 15) +
theme(panel.grid.major.y = element_blank())+
theme(legend.position = "none")
# 2024 Recording Schedule
ggplot(recording_metadata %>% filter (Year == "2024"), aes(x = Julian_Day, y = name)) +
geom_segment(aes(xend = Julian_Day, yend = name), color = "gray") +  # Stems
geom_point(aes(color = as.factor(name)), size = 4) +  # Lollipop heads (line) - can adjust to be points
scale_color_viridis_d() +
scale_x_continuous(breaks = seq(0, 365, by = 5)) +
labs(x = "Julian Day", y = "Recorder (Site ID)",
title = "Julian Days Each Recorder Was Active in 2024") +
xlim(115, "inf")+
theme_minimal(base_size = 15) +
theme(panel.grid.major.y = element_blank())+  # Optionally remove horizontal grid lines
theme(legend.position = "none")
# 2023 Recording Schedule
ggplot(recording_metadata %>% filter (Year == "2023", name != "TEST Bait Site (Throwaway)"), aes(x = Julian_Day, y = name)) +
geom_segment(aes(xend = Julian_Day, yend = name), color = "gray") +  # Stems
geom_point(aes(color = as.factor(name)), size = 4) +  # Lollipop heads (line) - can adjust to be points
scale_color_viridis_d() +
scale_x_continuous(breaks = seq(0, 365, by = 5)) +
labs(x = "Julian Day", y = "Recorder (Site ID)",
title = "Julian Days Each Recorder Was Active in 2023") +
theme_minimal(base_size = 15) +
theme(panel.grid.major.y = element_blank())+
theme(legend.position = "none")
# 2024 Recording Schedule
ggplot(recording_metadata %>% filter (Year == "2024"), aes(x = Julian_Day, y = name)) +
geom_segment(aes(xend = Julian_Day, yend = name), color = "gray") +  # Stems
geom_point(aes(color = as.factor(name)), size = 4) +  # Lollipop heads (line) - can adjust to be points
scale_color_viridis_d() +
scale_x_continuous(breaks = seq(0, 365, by = 5)) +
labs(x = "Julian Day", y = "Recorder (Site ID)",
title = "Julian Days Each Recorder Was Active in 2024") +
theme_minimal(base_size = 15) +
theme(panel.grid.major.y = element_blank())+  # Optionally remove horizontal grid lines
theme(legend.position = "none")
# 2023 Recording Schedule
ggplot(recording_metadata %>% filter (Year == "2023", name != "TEST Bait Site (Throwaway)"), aes(x = Julian_Day, y = name)) +
geom_segment(aes(xend = Julian_Day, yend = name), color = "gray") +
geom_point(aes(color = as.factor(name)), size = 4) +
scale_color_viridis_d() +
scale_x_continuous(breaks = seq(0, 365, by = 5)) +
labs(x = "Julian Day", y = "Recorder (Site ID)",
title = "Julian Days Each Recorder Was Active in 2023") +
theme_minimal(base_size = 15) +
theme(panel.grid.major.y = element_blank())+
theme(legend.position = "none")
# 2024 Recording Schedule
ggplot(recording_metadata %>% filter (Year == "2024"), aes(x = Julian_Day, y = name)) +
geom_segment(aes(xend = Julian_Day, yend = name), color = "gray") +
geom_point(aes(color = as.factor(name)), size = 4) +
scale_color_viridis_d() +
scale_x_continuous(breaks = seq(0, 365, by = 5)) +
labs(x = "Julian Day", y = "Recorder (Site ID)",
title = "Julian Days Each Recorder Was Active in 2024") +
coord_cartesian(xlim = c(115, 255)) +
theme_minimal(base_size = 15) +
theme(panel.grid.major.y = element_blank())+
theme(legend.position = "none")
# 2023 Recording Schedule
ggplot(recording_metadata %>% filter (Year == "2023", name != "TEST Bait Site (Throwaway)"), aes(x = Julian_Day, y = name)) +
geom_segment(aes(xend = Julian_Day, yend = name), color = "gray") +
geom_point(aes(color = as.factor(name)), size = 4) +
scale_color_viridis_d() +
scale_x_continuous(breaks = seq(0, 365, by = 5)) +
labs(x = "Julian Day", y = "Recorder (Site ID)",
title = "Julian Days Each Recorder Was Active in 2023") +
theme_minimal(base_size = 15) +
coord_cartesian(xlim = c(115, 365)) +
theme(panel.grid.major.y = element_blank())+
theme(legend.position = "none")
# 2024 Recording Schedule
ggplot(recording_metadata %>% filter (Year == "2024"), aes(x = Julian_Day, y = name)) +
geom_segment(aes(xend = Julian_Day, yend = name), color = "gray") +
geom_point(aes(color = as.factor(name)), size = 4) +
scale_color_viridis_d() +
scale_x_continuous(breaks = seq(0, 365, by = 5)) +
labs(x = "Julian Day", y = "Recorder (Site ID)",
title = "Julian Days Each Recorder Was Active in 2024") +
coord_cartesian(xlim = c(115, 255)) +
theme_minimal(base_size = 15) +
theme(panel.grid.major.y = element_blank())+
theme(legend.position = "none")
# 2023 Recording Schedule
ggplot(recording_metadata %>% filter (Year == "2023", name != "TEST Bait Site (Throwaway)"), aes(x = Julian_Day, y = name)) +
geom_segment(aes(xend = Julian_Day, yend = name), color = "gray") +
geom_point(aes(color = as.factor(name)), size = 4) +
scale_color_viridis_d() +
scale_x_continuous(breaks = seq(0, 365, by = 5)) +
labs(x = "Julian Day", y = "Recorder (Site ID)",
title = "Julian Days Each Recorder Was Active in 2023") +
theme_minimal(base_size = 15) +
coord_cartesian(xlim = c(115, 255)) +
theme(panel.grid.major.y = element_blank())+
theme(legend.position = "none")
# 2024 Recording Schedule
ggplot(recording_metadata %>% filter (Year == "2024"), aes(x = Julian_Day, y = name)) +
geom_segment(aes(xend = Julian_Day, yend = name), color = "gray") +
geom_point(aes(color = as.factor(name)), size = 4) +
scale_color_viridis_d() +
scale_x_continuous(breaks = seq(0, 365, by = 5)) +
labs(x = "Julian Day", y = "Recorder (Site ID)",
title = "Julian Days Each Recorder Was Active in 2024") +
coord_cartesian(xlim = c(115, 255)) +
theme_minimal(base_size = 15) +
theme(panel.grid.major.y = element_blank())+
theme(legend.position = "none")
# 2023 Recording Schedule
ggplot(recording_metadata %>% filter (Year == "2023", name != "TEST Bait Site (Throwaway)"), aes(x = Julian_Day, y = name)) +
geom_segment(aes(xend = Julian_Day, yend = name), color = "gray") +
geom_point(aes(color = as.factor(name)), size = 4) +
scale_color_viridis_d() +
scale_x_continuous(breaks = seq(0, 365, by = 5)) +
labs(x = "Julian Day", y = "Recorder (Site ID)",
title = "Julian Days Each Recorder Was Active in 2023") +
theme_minimal(base_size = 15) +
coord_cartesian(xlim = c(115, 255)) + #change if we ever record year round
theme(panel.grid.major.y = element_blank())+
theme(legend.position = "none")
# 2024 Recording Schedule
ggplot(recording_metadata %>% filter (Year == "2024"), aes(x = Julian_Day, y = name)) +
geom_segment(aes(xend = Julian_Day, yend = name), color = "gray") +
geom_point(aes(color = as.factor(name)), size = 4) +
scale_color_viridis_d() +
scale_x_continuous(breaks = seq(0, 365, by = 5)) +
labs(x = "Julian Day", y = "Recorder (Site ID)",
title = "Julian Days Each Recorder Was Active in 2024") +
coord_cartesian(xlim = c(115, 255)) +#change if we ever record year round
theme_minimal(base_size = 15) +
theme(panel.grid.major.y = element_blank())+
theme(legend.position = "none")
# 2023 Recording Schedule
ggplot(recording_metadata %>% filter (Year == "2023", name != "TEST Bait Site (Throwaway)"), aes(x = Julian_Day, y = name)) +
geom_segment(aes(xend = Julian_Day, yend = name), color = "gray") +
geom_point(aes(color = as.factor(name)), size = 4) +
scale_color_viridis_d() +
scale_x_continuous(breaks = seq(0, 365, by = 5)) +
labs(x = "Julian Day", y = "Recorder (Site ID)",
title = "Julian Days Each Recorder Was Active in 2023") +
theme_minimal(base_size = 15) +
theme(panel.grid.major.y = element_blank())+
theme(legend.position = "none")
# 2024 Recording Schedule
ggplot(recording_metadata %>% filter (Year == "2024"), aes(x = Julian_Day, y = name)) +
geom_segment(aes(xend = Julian_Day, yend = name), color = "gray") +
geom_point(aes(color = as.factor(name)), size = 4) +
scale_color_viridis_d() +
scale_x_continuous(breaks = seq(0, 365, by = 5)) +
labs(x = "Julian Day", y = "Recorder (Site ID)",
title = "Julian Days Each Recorder Was Active in 2024") +
coord_cartesian(xlim = c(115, 255)) +#change if we ever record year round
theme_minimal(base_size = 15) +
theme(panel.grid.major.y = element_blank())+
theme(legend.position = "none")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(scales)
library(ggpubr)
library(rstatix)
library(ggpmisc)
library(tibble)
library(timetk)
library(plotly)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(grid)
library(png)
library(ggimage)
library(hms)
library(cowplot)
library(data.table)
library(viridis)
#maps
library(leaflet)
library(leaflet.extras)
library(leaflet.providers)
library(htmltools)
library(sf)
#diel and activity overlaps
library(camtrapR)
library(fmsb)
#summary
library(vtable)
#audio will turn on if necessary
library(embed)
aru_locations<- read.csv("../Metadata/Acoustic Project Sites.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
recording_metadata<- read.csv("../Data/Arbimon Data/Recording_Metadata.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
pm_results<- read.csv("../Data/Arbimon Data/pattern_matching_rois.0001.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
species_metadata<- read.csv("../Data/Arbimon Data/species.0001.csv", header=TRUE, sep = ",", stringsAsFactors=FALSE)
# lubridate formatting
recording_metadata$datetime <- ymd_hms(recording_metadata$datetime)
locations_sf<-vegdatajoin3 %>%  #adjust where this data is coming from
st_as_sf(coords=c("E","N"), crs=6527)
---
title: "02-Acoustic Analysis"
knitr::opts_chunk$set(echo = TRUE)
---
title: "02-Acoustic Analysis"
ggplot(data= day_avg_index, aes(x= DAY, y= avg_NDSI, color= STATION))+
geom_line(size=1.5)+
geom_point(size= 4)+
theme_bw(base_size=15)+
ggtitle("Daily Average Anthropogenic Disturbance")+
labs(x= "Date", y= "NDSI")+
scale_x_datetime(date_breaks =  "1 day")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#| fig.cap="Figure 1. Photograph of Partnership for the Delaware Estuary crew member Ken Williamson at Port Mahon, DE, collecting vegetation data in the summer of 2024. Photo by Kelly Faller."
knitr::include_graphics("../Images/GAR_01.jpg")
